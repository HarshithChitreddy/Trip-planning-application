{
	"info": {
		"_postman_id": "cca0a8c2-10cb-481b-a2e2-00f87ab9ad84",
		"name": "distances",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "42599998-cca0a8c2-10cb-481b-a2e2-00f87ab9ad84"
	},
	"item": [
		{
			"name": "base: correct status",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c270104c-9c1c-4b7d-af87-e1ac0925eed8",
						"exec": [
							"pm.test(\"Response is HTTP200 status\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "841ab3de-0d15-4aae-b767-4db81ced7d14",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"requestType\": \"distances\",\n    \"places\": [],\n    \"earthRadius\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api/distances",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"distances"
					]
				}
			},
			"response": []
		},
		{
			"name": "reddy17: No places with cosine",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c270104c-9c1c-4b7d-af87-e1ac0925eed8",
						"exec": [
							"pm.test(\"reddy17: No places with cosines returns empty distances.\", () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.eql({",
							"        requestType: \"distances\",",
							"        places: [],",
							"        earthRadius: 4,",
							"        formula: \"cosines\",",
							"        distances: []",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "cce05bf5-1fc9-464c-a175-847ea2dc81ad",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"requestType\": \"distances\",\n  \"places\": [],\n  \"earthRadius\": 4,\n  \"formula\": \"cosines\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api/distances",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"distances"
					]
				}
			},
			"response": []
		},
		{
			"name": "dnweath: One Place Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c68594c9-d886-47c8-980d-326989e772fa",
						"exec": [
							"pm.test(\"dnweath: One location successfully returns a single value of 0 for distances array.\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.distances).to.eql([0]);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "a9c5b09f-9a15-4406-a14a-dcd4dbca6b14",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"requestType\": \"distances\",\r\n    \"places\": [\r\n        {\r\n            \"name\": \"Location 1\",\r\n            \"latitude\": \"0.0\",\r\n            \"longitude\": \"0.0\"\r\n        }\r\n    ],\r\n    \"earthRadius\": 3000.0\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api/distances",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"distances"
					]
				}
			},
			"response": []
		},
		{
			"name": "reddy17: Two Places Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c68594c9-d886-47c8-980d-326989e772fa",
						"exec": [
							"pm.test(\"reddy17: Two locations successfully returns.\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.distances).to.eql([1146,1146]);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "df861f0a-c259-4502-8748-03b93ea16326",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"requestType\": \"distances\",\r\n    \"places\": [\r\n        {\r\n            \"name\": \"Location 1\",\r\n            \"latitude\": \"39.56\",\r\n            \"longitude\": \"-105.07\"\r\n        },\r\n                {\r\n            \"name\": \"Location 2\",            \r\n            \"latitude\": \"42.66\",\r\n            \"longitude\": \"-76.18\"\r\n        }\r\n    ],\r\n    \"earthRadius\": 3000.0\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api/distances",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"distances"
					]
				}
			},
			"response": []
		},
		{
			"name": "reddy17: Three Places Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5b0993a8-a452-4732-bac4-6006d2067926",
						"exec": [
							"pm.test(\"reddy17: Two locations successfully returns.\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.distances).to.eql([52,107,69]);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "66df7186-16f2-4982-a078-7ce5275c6501",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"requestType\": \"distances\",\r\n    \"places\": [\r\n        {\r\n            \"name\": \"Location 1\",\r\n            \"latitude\": \"40.58\",\r\n            \"longitude\": \"-105.09\"\r\n        },\r\n                {\r\n            \"name\": \"Location 2\",            \r\n            \"latitude\": \"39.94\",\r\n            \"longitude\": \"-104.08\"\r\n        },\r\n                {\r\n            \"name\": \"Location 3\",\r\n            \"latitude\": \"40.15\",\r\n            \"longitude\": \"-106.73\"\r\n        }\r\n    ],\r\n    \"earthRadius\": 3000.0\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api/distances",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"distances"
					]
				}
			},
			"response": []
		},
		{
			"name": "chrisc23: Testing invalid formula",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3489eea6-8f39-402b-91be-cbdca41bb656",
						"exec": [
							"pm.test(\"chrisc23: Testing for incorrect.Status should be 400\", () => {\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "28bc0b3a-b383-4dc5-bbf5-b3c3a864ead1",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"requestType\": \"distances\",\r\n   \r\n    \"places\": [\r\n        {\r\n            \"name\": \"Location 1\",\r\n            \"latitude\": \"0.0\",\r\n            \"longitude\": \"0.0\"\r\n        },\r\n        {\r\n            \"name\": \"Location 2\",\r\n            \"latitude\": \"0.0\",\r\n            \"longitude\": \"90.0\"\r\n        }\r\n    ],\r\n    \"formula\": \"testing\",\r\n    \"earthRadius\": 3000.0\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api/distances",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"distances"
					]
				}
			},
			"response": []
		},
		{
			"name": "dnweath: Two Places Test with Haversine",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "54290c0d-67ca-48ea-9b4b-62b7594ddfa6",
						"exec": [
							"pm.test(\"dnweath: Two places with Haversine returns proper distances\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.distances).to.eql([4712,4712]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "18764250-0df8-4dc5-9e52-96e6a459574a",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"requestType\": \"distances\",\r\n    \"formula\": \"haversine\",\r\n    \"places\": [\r\n        {\r\n            \"name\": \"Location 1\",\r\n            \"latitude\": \"0.0\",\r\n            \"longitude\": \"0.0\"\r\n        },\r\n                {\r\n            \"name\": \"Location 2\",            \r\n            \"latitude\": \"90.0\",\r\n            \"longitude\": \"90.0\"\r\n        }\r\n    ],\r\n    \"earthRadius\": 3000.0\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api/distances",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"distances"
					]
				}
			},
			"response": []
		},
		{
			"name": "dnweath: Three Places test with Haversine",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f7bc5f90-e07e-4b5f-96ec-03a1602879d5",
						"exec": [
							"pm.test(\"dnweath: Two places with Haversine returns proper distances\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.distances).to.eql([4712,7069,3142]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "a2702c64-9907-49de-a669-d47e7c0cf634",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"requestType\": \"distances\",\r\n    \"formula\": \"haversine\",\r\n    \"places\": [\r\n        {\r\n            \"name\": \"Location 1\",\r\n            \"latitude\": \"0.0\",\r\n            \"longitude\": \"0.0\"\r\n        },\r\n                {\r\n            \"name\": \"Location 2\",            \r\n            \"latitude\": \"90.0\",\r\n            \"longitude\": \"90.0\"\r\n        },\r\n                {\r\n            \"name\": \"Location 3\",\r\n            \"latitude\": \"-45.0\",\r\n            \"longitude\": \"-45.0\"\r\n        }\r\n    ],\r\n    \"earthRadius\": 3000.0\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api/distances",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"distances"
					]
				}
			},
			"response": []
		},
		{
			"name": "kjell: Test distances with two places, formula Vincenty",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5d81918f-af89-4c85-bdc1-49d436510809",
						"exec": [
							"pm.test(\"kjell: Two places with Vincenty returns proper distances\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.distances).to.eql([9425, 9425]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "6da5968a-5f5c-4749-b88e-bb0c868510be",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"requestType\": \"distances\",\r\n    \"formula\": \"vincenty\",\r\n    \"places\": [\r\n        {\r\n            \"name\": \"Sun Wukong\",\r\n            \"municipality\": \"Waterfall Cave\",\r\n            \"region\": \"Mountain of Flowers and Fruit\",\r\n            \"country\": \"Aolai\",\r\n            \"latitude\": \"45.0\",\r\n            \"longitude\": \"90.0\"\r\n        },\r\n        {\r\n            \"name\": \"Subodhi\",\r\n            \"municipality\": \"Cave of the Moon and Three Stars\",\r\n            \"region\": \"Mountain of Mind and Heart\",\r\n            \"country\": \"Continent to the West\",\r\n            \"latitude\": \"-45.0\",\r\n            \"longitude\": \"-90.0\"\r\n        }\r\n    ],\r\n    \"earthRadius\": 3000.0\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api/distances",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"distances"
					]
				}
			},
			"response": []
		},
		{
			"name": "lennoxxx: Three Places Vincenty",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "004fa529-bab2-4baf-8d54-e8f87a3a2c5c",
						"exec": [
							"pm.test(\"lennoxxx: Three places with Vincenty returns proper distances\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.distances).to.eql([31,39,20]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "8e4f079a-2462-4c23-b101-84a663746873",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"requestType\": \"distances\",\r\n    \"formula\": \"vincenty\",\r\n    \"places\": [\r\n        {\r\n            \"name\": \"Fort Collins\",\r\n            \"latitude\": \"40.570988\",\r\n            \"longitude\": \"105.123711\"\r\n        },\r\n        {\r\n            \"name\": \"Cheyenne\",            \r\n            \"latitude\": \"41.130120\",\r\n            \"longitude\": \"104.848022\"\r\n        },\r\n        {\r\n            \"name\": \"Greeley\",            \r\n            \"latitude\": \"40.390620\",\r\n            \"longitude\": \"104.679565\"\r\n        }\r\n    ],\r\n    \"earthRadius\": 3000.0\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api/distances",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"distances"
					]
				}
			},
			"response": []
		},
		{
			"name": "chrisc23: added 5 places",
			"id": "4e76baf9-a416-40c1-86a2-4ef1bed89b06",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "\r\n{\r\n    \"requestType\": \"distances\",\r\n    \"places\": [\r\n        {\r\n            \"name\": \"Location 1\",\r\n            \"latitude\": \"40.58\",\r\n            \"longitude\": \"-105.09\"\r\n        },\r\n                {\r\n            \"name\": \"Location 2\",            \r\n            \"latitude\": \"39.94\",\r\n            \"longitude\": \"-104.08\"\r\n        },\r\n                {\r\n            \"name\": \"Location 3\",\r\n            \"latitude\": \"40.15\",\r\n            \"longitude\": \"-106.73\"\r\n        },\r\n        {\r\n            \"name\": \"Caribou Island\",\r\n            \"latitude\": \"47.357645\",\r\n            \"longitude\": \"-85.808298\"\r\n        },\r\n        {\r\n            \"name\": \"Bear Island\",\r\n            \"latitude\": \"74.441913\",\r\n            \"longitude\": \"19.060965\"\r\n        },\r\n        {\r\n            \"name\": \"Kangaroo Island\",\r\n            \"latitude\": \"-35.794981\",\r\n            \"longitude\": \"137.266003\"\r\n        }\r\n    ],\r\n    \"earthRadius\": 3000.0\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api/distances",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"distances"
					]
				}
			},
			"response": []
		},
		{
			"name": "reddy17: ensuring distances are calculated",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d20c3ba2-fe3b-49e1-852c-63ca2bf5d351",
						"exec": [
							"pm.test(\"reddy24: Distances should be calculated and returned correctly\", () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.distances[0]).to.be.a('number');",
							"    pm.expect(responseJson.distances[0]).to.be.within(0, 6371);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "aacb7ab4-6ad5-48da-b1b5-8776f6c6c841",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"requestType\": \"distances\",\r\n  \"places\": [\r\n    { \"name\": \"Place A\", \"latitude\": \"10.0\", \"longitude\": \"20.0\" },\r\n    { \"name\": \"Place B\", \"latitude\": \"30.0\", \"longitude\": \"40.0\" }\r\n  ],\r\n  \"earthRadius\": 6371,\r\n  \"formula\": \"cosines\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api/distances",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"distances"
					]
				}
			},
			"response": []
		}
	]
}